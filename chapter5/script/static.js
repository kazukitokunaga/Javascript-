/*
 * 静的プロパティ／静的メソッドは、「インスタンスを生成しなくてもオブジェクトから直接呼び出せるプロパティ／メソッド」のこと。
 * 静的プロパティ／静的メソッドを定義する場合、「プロトタイプオブジェクトには登録できない」ので要注意。
 * プロトタイプオブジェクトは、あくまで「インスタンス」から暗黙的に参照されることをもくてきとしたオブジェクトなので、これは当然。
 */

// コンストラクター
var Area = function(){};

// 静的プロパティの定義
Area.version = '1.0';

// 静的メソッドtriangleの定義
Area.triangle = function(base, height){
  return base * height / 2;
};

// 静的メソッドdiamondの定義
Area.diamond = function(width, height){
  return width * height / 2;
};

console.log('Areaクラスのバージョン：' + Area.version); // 結果：1.0
console.log('三角形の面積：' + Area.triangle); // 結果：7.5


// インスタンス経由で静的メソッドを呼び出そうとするとエラーになる。
var a = new Area();
console.log('菱形の面積：' + a.diamond(10, 2)); // 結果：エラー

/*
 * エラーになるのは、静的メンバーはあくまでAreaという関数オブジェクトに動的に追加されたメンバーであり、
 * Areaが生成するインスタンスに追加される訳ではないから。
 */

/*
 * １．静的プロパティは、基本的に読み取り専用の用途で
 * 　　静的プロパティは、インスタンスプロパティと異なり、「クラス単位で保有される情報」。
 * 　　つまり、その内容を変更した場合、スクリプト内のすべてに変更が反映されてしまう。
 * 　　よって、静的プロパティで定義する値は、読み取り専用の用途に限定すべき。
 * ２．静的メソッドの中では、thisキーワードは使えない
 * 　　インスタンスメソッドの中でのthisキーワードは、インスタンス自身を表す。
 * 　　一方、静的メソッドの中でのthisキーワードは、コンストラクターを表す。
 * 　　インスタンスがないので当然だが、静的メソッドからインスタンスプロパティの値アクセスすることはできないので注意。
 */

/*
 * なぜ、静的メソッド／静的プロパティを使用するのか？
 * グローバル変数／関数を使えば良いではないかと思うかもしれないが、
 * たとえば１００個のグローバル変数／関数を含んだライブラリを使おうとした場合、１００個の名前は予約語になってしまう。
 * また、もし間違えて上書きしてしまった場合には、下の機能や情報は失われてしまう。
 * よって、グローバル変数／関数はできるだけ減らして、関連する機能や情報は静的メンバーにまとめることを心がける。
 */